let { MessageType } = (await import('@adiwajshing/baileys')).default

let handler  = async (m, { conn, command, args, usedPrefix, DevMode }) => {
  let type = (args[0] || '').toLowerCase()
  let _type = (args[0] || '').toLowerCase()
  let user = global.db.data.users[m.sender]
  
  //----------HARGA
  let hdog = 2
  let hcat = 2
  let hhorse = 4
  let hfox = 6
  let hpetfood = 950

let caption = `
üêà ‚Ä¢ *·¥Ñ·¥Ä·¥õ:* 
‚ûû ${hcat} ·¥ò·¥á·¥õ ·¥õ·¥è·¥ã·¥á…¥üîñ

üêï ‚Ä¢ *·¥Ö·¥è…¢:*
‚ûû ${hdog} ·¥ò·¥á·¥õ ·¥õ·¥è·¥ã·¥á…¥üîñ

üêé ‚Ä¢ * ú·¥è Äs·¥á:* 
‚ûû ${hhorse} ·¥ò·¥á·¥õ ·¥õ·¥è·¥ã·¥á…¥üîñ

ü¶ä ‚Ä¢ *“ì·¥èx:* 
‚ûû ${hfox} ·¥ò·¥á·¥õ ·¥õ·¥è·¥ã·¥á…¥üîñ

üçñ ‚Ä¢ *·¥ò·¥á·¥õ “ì·¥è·¥è·¥Ö:*
‚ûû ${hpetfood} ·¥ç·¥è…¥·¥á è üíπ

- - - - - - - - - - - - - - - - - - - - -

${htki} ABILITY ${htka}
‚ûû üêà ‚Ä¢ ·¥Ñ·¥Ä·¥õ :
- …™…¥·¥Ñ Ä·¥á·¥Äs·¥á  ú·¥á·¥Ä ü·¥õ ú 5% /  ü·¥á·¥†·¥á ü ·¥° ú·¥á…¥ ·¥ús·¥á *. ú·¥á·¥Ä ü*

‚ûû üêï ‚Ä¢ ·¥Ö·¥è…¢ :
- ·¥Ñ·¥è·¥ç…™…¥…¢ s·¥è·¥è…¥...

‚ûû üêé ‚Ä¢  ú·¥è Äs·¥á :
- ·¥Ñ·¥è·¥ç…™…¥…¢ s·¥è·¥è…¥...

‚ûû ü¶ä ‚Ä¢ “ì·¥èx :
- ·¥Ñ·¥è·¥ç…™…¥…¢ s·¥è·¥è…¥...
`
const sections = [
   {
	title: "- ·¥ò ·¥á ·¥õ  s ·¥õ ·¥è  Ä ·¥á -",
	rows: [
	    {title: "üêà ‚Ä¢ ·¥Ñ·¥Ä·¥õ", rowId: ".petshop cat"},
	    {title: "üêï ‚Ä¢ ·¥Ö·¥è…¢", rowId: ".petshop dog"},
	    {title: "üêé ‚Ä¢  ú·¥è Äs·¥á", rowId: ".petshop horse"},
	    {title: "ü¶ä ‚Ä¢ “ì·¥èx", rowId: ".petshop fox"},
	    {title: "üçñ ‚Ä¢ ·¥ò·¥á·¥õ “ì·¥è·¥è·¥Ö", rowId: ".petshop petfood"},
	]
    },
]

const listMessage = {
  text: `*${htki} PET SHOP ${htka}*`,
  footer: caption,
  title: ' ',
  buttonText: " ô ·¥ú  è",
  sections
}

  try {
    if (/petshop/i.test(command)) {
      const count = args[1] && args[1].length > 0 ? Math.min(99999999, Math.max(parseInt(args[1]), 1)) : !args[1] || args.length < 3 ? 1 : Math.min(1, count)
        switch (type) {
          case 'cat':
          if (user.cat > 0) return m.reply(' è·¥è·¥ú ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ú·¥Ä·¥†·¥á …™·¥õ!')
            if(user.pet < hcat) return m.reply(` è·¥è·¥ú Ä ·¥ò·¥á·¥õ ·¥õ·¥è·¥ã·¥á…¥ …¥·¥è·¥õ ·¥á…¥·¥è·¥ú…¢ ú !`)
            global.db.data.users[m.sender].pet -= hcat
            global.db.data.users[m.sender].cat += 1
            conn.sendButton(m.chat, `*${htki} NEW PET !${htka}*`, `üéâ ·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥s,  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ò·¥ú Ä·¥Ñ ú·¥Äs·¥á·¥Ö ·¥ò·¥á·¥õ *·¥Ñ·¥Ä·¥õ*`, null, [['…™…¥·¥†·¥á…¥·¥õ·¥è Ä è', '.inv'],['“ì·¥á·¥á·¥Ö', `.feed ${type}`]],m)
            break
          case 'dog':
          if (user.dog > 0) return m.reply(' è·¥è·¥ú ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ú·¥Ä·¥†·¥á …™·¥õ!')
            if(user.pet < hdog) return m.reply(` è·¥è·¥ú Ä ·¥ò·¥á·¥õ ·¥õ·¥è·¥ã·¥á…¥ …¥·¥è·¥õ ·¥á…¥·¥è·¥ú…¢ ú !`)
            global.db.data.users[m.sender].pet -= hdog
            global.db.data.users[m.sender].dog += 1
            conn.sendButton(m.chat, `*${htki} NEW PET !${htka}*`, `üéâ ·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥s,  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ò·¥ú Ä·¥Ñ ú·¥Äs·¥á·¥Ö ·¥ò·¥á·¥õ *·¥Ö·¥è…¢*`, null, [['…™…¥·¥†·¥á…¥·¥õ·¥è Ä è', '.inv'],['“ì·¥á·¥á·¥Ö', `.feed ${type}`]],m)
            break
          case 'fox':
          if (user.fox > 0) return m.reply(' è·¥è·¥ú ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ú·¥Ä·¥†·¥á …™·¥õ!')
            if(user.pet < hfox) return m.reply(` è·¥è·¥ú Ä ·¥ò·¥á·¥õ ·¥õ·¥è·¥ã·¥á…¥ …¥·¥è·¥õ ·¥á…¥·¥è·¥ú…¢ ú !`)
            global.db.data.users[m.sender].pet -= hfox
            global.db.data.users[m.sender].fox += 1
            conn.sendButton(m.chat, `*${htki} NEW PET !${htka}*`, `üéâ ·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥s,  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ò·¥ú Ä·¥Ñ ú·¥Äs·¥á·¥Ö ·¥ò·¥á·¥õ *“ì·¥èx*`, null, [['…™…¥·¥†·¥á…¥·¥õ·¥è Ä è', '.inv'],['“ì·¥á·¥á·¥Ö', `.feed ${type}`]],m)
            break
          case 'horse':
          if (user.horse > 0) return m.reply(' è·¥è·¥ú ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ú·¥Ä·¥†·¥á …™·¥õ!')
            if(user.pet < hhorse) return m.reply(` è·¥è·¥ú Ä ·¥ò·¥á·¥õ ·¥õ·¥è·¥ã·¥á…¥ …¥·¥è·¥õ ·¥á…¥·¥è·¥ú…¢ ú !`)
            global.db.data.users[m.sender].pet -= hhorse
            global.db.data.users[m.sender].horse += 1
            conn.sendButton(m.chat, `*${htki} NEW PET !${htka}*`, `üéâ ·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥s,  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ò·¥ú Ä·¥Ñ ú·¥Äs·¥á·¥Ö ·¥ò·¥á·¥õ * ú·¥è Äs·¥á*`, null, [['…™…¥·¥†·¥á…¥·¥õ·¥è Ä è', '.inv'],['“ì·¥á·¥á·¥Ö', `.feed ${type}`]],m)
            break
          case 'petfood':
          if (global.db.data.users[m.sender].money >= hpetfood * count) {
            global.db.data.users[m.sender].petFood += count * 1
            global.db.data.users[m.sender].money -= hpetfood * count
            conn.sendButton(m.chat, `*${htki} BUYING ${htka}*`, `s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü  ô·¥è·¥ú…¢ ú·¥õ *${count}* ·¥ò·¥á·¥õ “ì·¥è·¥è·¥Ö, “ì·¥è Ä *${hpetfood * count}* ·¥ç·¥è…¥·¥á è !`,null, [['…™…¥·¥†·¥á…¥·¥õ·¥è Ä è', '.inv']], m)
          } else conn.reply(m.chat, ` è·¥è·¥ú Ä ·¥ç·¥è…¥·¥á è …¥·¥è·¥õ ·¥á…¥·¥è·¥ú…¢ ú !`, m) 
            break
            
          default:
            return await conn.sendMessage(m.chat, listMessage, {quoted: m})
        }
    } else if (/Ughh/i.test(command)) {
      const count = args[2] && args[2].length > 0 ? Math.min(99999999, Math.max(parseInt(args[2]), 1)) : !args[2] || args.length < 4 ? 1 :Math.min(1, count)
      switch (_type) {
        case 't':
          break
        case '':
          break

        default:
          return conn.sendButton( m.chat, caption, wm, null, [`‚ãÆ‚ò∞ Menu`, `.menu`], m)
      }
    }
  } catch (err) {
    m.reply("Error\n\n\n" + err.stack)
  }
}

handler.help = ['petshop']
handler.tags = ['rpg']
handler.command = /^(petshop)/i

export default handler
